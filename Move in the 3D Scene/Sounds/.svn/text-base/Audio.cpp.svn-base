#include "dxut.h"
#include "Audio.h"
#pragma warning (disable : 4127)  //消除while（1）此类循环的警告

AUDIO_STATE  g_audioState;

AUDIO_STATE::AUDIO_STATE()
{
	MAX_BACKMUSICS_NUM = 0;
	MAX_SOUNDS_NUM = 0;
	nCurBackMusicPlaying = 0;

	//音量初值
	fBackMusicsVolume = 3.0f;
	fSoundsVolume = 3.0f;
	bHandleBackMusicStop = false;
	bHandleStreamingWaveBankPrepared = false;

	//设置文件路径，同时随机选择一个风格的文件当做背景音乐
    //获得拥有的音乐类型个数
}

HRESULT PrepareXACT()
{
	HRESULT hr;
	WCHAR str[MAX_PATH]; //存储文件名
	HANDLE hFile;  //储存临时文件句柄
	DWORD dwFileSize; //文件大小
	DWORD dwByteRead; //已读入的文件大小，用于ReadFile函数（创建Sound Bank时）
	HANDLE hMapFile; //mapping file handle

	//first step
	//初始化cs
	InitializeCriticalSection(&g_audioState.cs);

	//初始化com
	hr = CoInitializeEx(NULL, COINIT_MULTITHREADED);
	if (SUCCEEDED(hr))
	{
		bool bAuditionMode = DoesCommandLineContainAuditionSwitch();
		bool bDebugMode = false;

		DWORD dwCreationFlags = 0;
		if (bAuditionMode)  dwCreationFlags |= XACT_FLAG_API_AUDITION_MODE;
		if (bDebugMode)  dwCreationFlags |= XACT_FLAG_API_DEBUG_MODE;

		hr = XACT3CreateEngine(dwCreationFlags, &g_audioState.pEngine);
	}
	if ( FAILED(hr) || g_audioState.pEngine == NULL )
		return E_FAIL;

	//Load the global settings file
	VOID *pGlobalSettingsData = NULL;
	DWORD dwGlobalSettingsFileSize = 0;
	bool bSuccess = false;
	if (SUCCEEDED(FindMediaFileCch(str, MAX_PATH, L"Audio\\GlobalSetting.xgs")))
	{
		hFile = CreateFile( str, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, 0, NULL);
		if (hFile)
		{
			dwGlobalSettingsFileSize = GetFileSize(hFile, NULL);
			if (dwGlobalSettingsFileSize != INVALID_FILE_SIZE )
			{
				pGlobalSettingsData = CoTaskMemAlloc(dwGlobalSettingsFileSize);
				if (pGlobalSettingsData)
				{
					if (0 != ReadFile(hFile, pGlobalSettingsData, dwGlobalSettingsFileSize, &dwByteRead, NULL) )
						bSuccess = true;
				}
			}
			CloseHandle(hFile);
		}
	}
	if (!bSuccess)
	{
		if (pGlobalSettingsData)
			CoTaskMemFree(pGlobalSettingsData);
		pGlobalSettingsData = NULL;
		dwGlobalSettingsFileSize = 0;
	}

	//Initialize & create the XACT runtime;
	XACT_RUNTIME_PARAMETERS xrParams = {0};
	xrParams.pGlobalSettingsBuffer = pGlobalSettingsData;
	xrParams.globalSettingsBufferSize = dwGlobalSettingsFileSize;
	xrParams.globalSettingsFlags = XACT_FLAG_GLOBAL_SETTINGS_MANAGEDATA; //可让系统自动释放buffer
	xrParams.fnNotificationCallback = XACTNotificationCallback;
	xrParams.lookAheadTime = XACT_ENGINE_LOOKAHEAD_DEFAULT;
	hr = g_audioState.pEngine->Initialize( &xrParams );
	if (FAILED(hr))
		return hr;

	//注册XACT notification
	//"wave bank prepared"
	XACT_NOTIFICATION_DESCRIPTION desc = {0};
	desc.flags = XACT_FLAG_NOTIFICATION_PERSIST;
	desc.type = XACTNOTIFICATIONTYPE_WAVEBANKPREPARED;
	g_audioState.pEngine->RegisterNotification(&desc);

	//"sound bank destoryed"
	desc.flags = XACT_FLAG_NOTIFICATION_PERSIST;
	desc.type = XACTNOTIFICATIONTYPE_SOUNDBANKDESTROYED;
	g_audioState.pEngine->RegisterNotification(&desc);

	//"Zero Latency cue prepared"
	desc.flags = XACT_FLAG_NOTIFICATION_PERSIST;
	desc.type = XACTNOTIFICATIONTYPE_CUEPREPARED;
	desc.cueIndex = XACTINDEX_INVALID;
	g_audioState.pEngine->RegisterNotification(&desc);

	//"Zero Latency cue stopped
	desc.flags = XACT_FLAG_NOTIFICATION_PERSIST;
	desc.type = XACTNOTIFICATIONTYPE_CUESTOP;
	desc.cueIndex = XACTINDEX_INVALID;
	g_audioState.pEngine->RegisterNotification(&desc);

	//Create an "In Memory" Wave Bank
	if (FAILED(hr = FindMediaFileCch(str, MAX_PATH, L"Audio\\InMemoryWaveBank.xwb") ))
		return hr;
	hFile = CreateFile(str, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, 0, NULL);
	if (hFile != INVALID_HANDLE_VALUE)
	{
		dwFileSize = GetFileSize(hFile, NULL);
		if (dwFileSize != -1)
		{
			hMapFile = CreateFileMapping(hFile, NULL, PAGE_READONLY, 0, dwFileSize, NULL);
			if (hMapFile)
			{
				g_audioState.pbInMemoryWaveBank = MapViewOfFile(hMapFile, FILE_MAP_READ, 0, 0, 0);
				if (g_audioState.pbInMemoryWaveBank)
				{
					hr = g_audioState.pEngine->CreateInMemoryWaveBank(g_audioState.pbInMemoryWaveBank, dwFileSize, 0, 0, &g_audioState.pInMemoryWaveBank);
				}
				CloseHandle(hMapFile);
			}
		}
		CloseHandle(hFile);
	}
	if ( FAILED(hr) )
		return E_FAIL;

	//创建Streaming Wave Bank;
	if (FAILED( hr = FindMediaFileCch(str, MAX_PATH, L"Audio\\StreamingWaveBank.xwb") ))
		return hr;
	hr = E_FAIL;
	g_audioState.hStreamingWaveBankFile = CreateFile(str, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, 
		                                 FILE_FLAG_OVERLAPPED | FILE_FLAG_NO_BUFFERING, NULL);
	if (g_audioState.hStreamingWaveBankFile != INVALID_HANDLE_VALUE)
	{
		XACT_STREAMING_PARAMETERS wsParams;
		ZeroMemory( &wsParams, sizeof(XACT_STREAMING_PARAMETERS));
		wsParams.file = g_audioState.hStreamingWaveBankFile;
		wsParams.offset = 0;
		wsParams.packetSize = 64;

		hr = g_audioState.pEngine->CreateStreamingWaveBank(&wsParams, &g_audioState.pStreamingWaveBank);
	}
	if (FAILED(hr))
		return E_FAIL;

	// 创建Sound Bank；
	if (FAILED(hr = FindMediaFileCch(str, MAX_PATH, L"Audio\\Sounds.xsb") ))
		return hr;
	hr = E_FAIL;
	hFile = CreateFile(str, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, 0, NULL);
	if (hFile != INVALID_HANDLE_VALUE)
	{
		dwFileSize = GetFileSize(hFile, NULL);
		if (dwFileSize != -1)
		{
			g_audioState.pbSoundBank = new BYTE [dwFileSize];
			if (g_audioState.pbSoundBank)
			{
				if (0 != ReadFile(hFile, g_audioState.pbSoundBank, dwFileSize, &dwByteRead, NULL))
					hr = g_audioState.pEngine->CreateSoundBank(g_audioState.pbSoundBank, dwFileSize, 0, 0, &g_audioState.pSoundBank);
			}
		}
		CloseHandle(hFile);
	}
	if (FAILED(hr))
		return E_FAIL;

	//统计Bank Ground Musics数目，并保存cue indexes；
	g_audioState.MAX_BACKMUSICS_NUM = 0;
	while(1)
	{
		CHAR sz[256];
		StringCchPrintfA( sz, 256, "BM_%d", g_audioState.MAX_BACKMUSICS_NUM+1);
		if ( XACTINDEX_INVALID == g_audioState.pSoundBank->GetCueIndex(sz) )
			break;
		else
			g_audioState.MAX_BACKMUSICS_NUM++;
	}
	if ((g_audioState.iBackMusics = new XACTINDEX [g_audioState.MAX_BACKMUSICS_NUM]) == NULL)
		return E_FAIL;
	for (int i=0; i<g_audioState.MAX_BACKMUSICS_NUM; i++)
	{
		CHAR sz[256];
		StringCchPrintfA(sz, 256, "BM_%d", i+1);
		g_audioState.iBackMusics[i] = g_audioState.pSoundBank->GetCueIndex(sz);
	}

	//统计sounds数目，保存cue indexes
	g_audioState.MAX_SOUNDS_NUM = 0;
	while(1)
	{
		CHAR sz[256];
		StringCchPrintfA( sz, 256, "sound_%d", g_audioState.MAX_SOUNDS_NUM+1);
		if (XACTINDEX_INVALID == g_audioState.pSoundBank->GetCueIndex(sz))
			break;
		else
			g_audioState.MAX_SOUNDS_NUM++;
	}
	if ((g_audioState.iSounds = new XACTINDEX [g_audioState.MAX_SOUNDS_NUM]) == NULL)
		return E_FAIL;
	for (int i=0; i<g_audioState.MAX_SOUNDS_NUM; i++)
	{
		CHAR sz[256];
		StringCchPrintfA( sz, 256, "sound_%d", i+1);
		g_audioState.iSounds[i] = g_audioState.pSoundBank->GetCueIndex(sz);
	}

	//Get indexes to XACT categories
	g_audioState.iBackMusicsCategory = g_audioState.pEngine->GetCategory("BackgroundMusics");
	g_audioState.iSoundsCategory = g_audioState.pEngine->GetCategory("Sounds");

	//设定初始音量
	g_audioState.pEngine->SetVolume(g_audioState.iBackMusicsCategory, g_audioState.fBackMusicsVolume);
	g_audioState.pEngine->SetVolume(g_audioState.iSoundsCategory, g_audioState.fSoundsVolume);

	//设定初始播放曲目
	g_audioState.nCurBackMusicPlaying = g_audioState.GetRand() % g_audioState.MAX_BACKMUSICS_NUM;
	

	return S_OK;
}


//---------------------------------------------------------------
//XACT notification call back;
void WINAPI XACTNotificationCallback(const XACT_NOTIFICATION *pNotification)
{
	if (pNotification->type == XACTNOTIFICATIONTYPE_WAVEBANKPREPARED &&
		pNotification->waveBank.pWaveBank == g_audioState.pStreamingWaveBank)
	{
		EnterCriticalSection(&g_audioState.cs);
		g_audioState.bHandleStreamingWaveBankPrepared = true;
		LeaveCriticalSection(&g_audioState.cs);
	}
	//sound destroyed
	if (pNotification->type == XACTNOTIFICATIONTYPE_SOUNDBANKDESTROYED && 
		pNotification->soundBank.pSoundBank == g_audioState.pSoundBank)
	{
		//clean sound bank memory
		if (g_audioState.pbSoundBank)
		{
			delete [] g_audioState.pbSoundBank;
			g_audioState.pbSoundBank = NULL;
		}
	}
	//back music prepared
	if (pNotification->type == XACTNOTIFICATIONTYPE_CUEPREPARED &&
		pNotification->cue.pCue == g_audioState.pBackMusic)
	{
		g_audioState.pBackMusic->Play();
			                       
	}
	//背景音乐放完一首
	if (pNotification->type == XACTNOTIFICATIONTYPE_CUESTOP &&
		pNotification->cue.pCue == g_audioState.pBackMusic)
	{
		
		EnterCriticalSection(&g_audioState.cs);
		g_audioState.bHandleBackMusicStop = true;
		g_audioState.nCurBackMusicPlaying = g_audioState.GetRand()%g_audioState.MAX_BACKMUSICS_NUM;
		LeaveCriticalSection(&g_audioState.cs);
		
	}
}

//-------------------------------------------------------------------------------
//更新操作
void UpdateAudio()
{
	EnterCriticalSection(&g_audioState.cs);
	bool bHandleStreamingWaveBankPrepared = g_audioState.bHandleStreamingWaveBankPrepared;
	bool bHandleBackMusicStop = g_audioState.bHandleBackMusicStop;
	LeaveCriticalSection(&g_audioState.cs);

	if (bHandleStreamingWaveBankPrepared)
	{
		//还原标记
		EnterCriticalSection(&g_audioState.cs);
		g_audioState.bHandleStreamingWaveBankPrepared = false;
		//g_audioState.nCurBackMusicPlaying = g_audioState.GetRand() % g_audioState.MAX_BACKMUSICS_NUM; //随机播放一首音乐
		LeaveCriticalSection(&g_audioState.cs);
		
		//准备Zero Latency Cue
		g_audioState.pSoundBank->Prepare(g_audioState.iBackMusics[g_audioState.nCurBackMusicPlaying], 
			                     0, 0, &g_audioState.pBackMusic);
	}
	if (bHandleBackMusicStop)
	{
		//还原标记
		EnterCriticalSection(&g_audioState.cs);
		g_audioState.bHandleBackMusicStop = false;
		LeaveCriticalSection(&g_audioState.cs);

		//释放之前的指针
		g_audioState.pBackMusic->Destroy();
		g_audioState.pBackMusic = NULL;

		//开始准备下一首
		g_audioState.pSoundBank->Prepare(g_audioState.iBackMusics[g_audioState.nCurBackMusicPlaying], 
			                              0, 0, &g_audioState.pBackMusic);
	}

	if (g_audioState.pEngine)
		g_audioState.pEngine->DoWork();
}


//-------------------------------------------------------------------------------------------
//释放
//-----------------------------------------------------------------------------------------------
VOID CleanupXACT()
{
	if (g_audioState.pEngine)
	{
		g_audioState.pEngine->ShutDown();
		g_audioState.pEngine->Release();
	}

	if (g_audioState.hStreamingWaveBankFile != INVALID_HANDLE_VALUE && 
		g_audioState.hStreamingWaveBankFile != NULL)
		CloseHandle(g_audioState.hStreamingWaveBankFile);

	if (g_audioState.pbSoundBank)
		delete [] g_audioState.pbSoundBank;
	g_audioState.pbSoundBank = NULL;

	if (g_audioState.pbInMemoryWaveBank)
		UnmapViewOfFile(g_audioState.pbInMemoryWaveBank);
	g_audioState.pbInMemoryWaveBank = NULL;

	//清空储存索引的指针
	if (g_audioState.iBackMusics)
		delete [] g_audioState.iBackMusics;
	g_audioState.iBackMusics = NULL;
	if (g_audioState.iSounds)
		delete [] g_audioState.iSounds;
	g_audioState.iSounds = NULL;

	DeleteCriticalSection(&g_audioState.cs);

	CoUninitialize();
}



//从路径中提取文件名
HRESULT FindMediaFileCch( WCHAR* strDestPath, int cchDest, LPCWSTR strFilename )
{
	bool bFound = false;

	if( NULL==strFilename || strFilename[0] == 0 || NULL==strDestPath || cchDest < 10 )
		return E_INVALIDARG;

	// Get the exe name, and exe path
	WCHAR strExePath[MAX_PATH] = {0};
	WCHAR strExeName[MAX_PATH] = {0};
	WCHAR* strLastSlash = NULL;
	GetModuleFileName( NULL, strExePath, MAX_PATH );
	strExePath[MAX_PATH-1]=0;
	strLastSlash = wcsrchr( strExePath, TEXT('\\') );
	if( strLastSlash )
	{
		StringCchCopy( strExeName, MAX_PATH, &strLastSlash[1] );

		// Chop the exe name from the exe path
		*strLastSlash = 0;

		// Chop the .exe from the exe name
		strLastSlash = wcsrchr( strExeName, TEXT('.') );
		if( strLastSlash )
			*strLastSlash = 0;
	}

	StringCchCopy( strDestPath, cchDest, strFilename ); 
	if( GetFileAttributes( strDestPath ) != 0xFFFFFFFF )
		return true;

	// Search all parent directories starting at .\ and using strFilename as the leaf name
	WCHAR strLeafName[MAX_PATH] = {0};
	StringCchCopy( strLeafName, MAX_PATH, strFilename ); 

	WCHAR strFullPath[MAX_PATH] = {0};
	WCHAR strFullFileName[MAX_PATH] = {0};
	WCHAR strSearch[MAX_PATH] = {0};
	WCHAR* strFilePart = NULL;

	GetFullPathName( L".", MAX_PATH, strFullPath, &strFilePart );
	if( strFilePart == NULL )
		return false;

	while( strFilePart != NULL && *strFilePart != '\0' )
	{
		StringCchPrintf( strFullFileName, MAX_PATH, L"%s\\%s", strFullPath, strLeafName ); 
		if( GetFileAttributes( strFullFileName ) != 0xFFFFFFFF )
		{
			StringCchCopy( strDestPath, cchDest, strFullFileName ); 
			bFound = true;
			break;
		}

		StringCchPrintf( strFullFileName, MAX_PATH, L"%s\\Tutorials\\%s\\%s", strFullPath, strExeName, strLeafName ); 
		if( GetFileAttributes( strFullFileName ) != 0xFFFFFFFF )
		{
			StringCchCopy( strDestPath, cchDest, strFullFileName ); 
			bFound = true;
			break;
		}

		StringCchPrintf( strSearch, MAX_PATH, L"%s\\..", strFullPath ); 
		GetFullPathName( strSearch, MAX_PATH, strFullPath, &strFilePart );
	}
	if( bFound )
		return S_OK;

	// On failure, return the file as the path but also return an error code
	StringCchCopy( strDestPath, cchDest, strFilename );

	return HRESULT_FROM_WIN32(ERROR_FILE_NOT_FOUND);
}


//--------------------------------------------------------------------------------------
//检查命令行参数
bool DoesCommandLineContainAuditionSwitch()
{
	const WCHAR* strAuditioning = L"-audition"; size_t nArgLen; int nNumArgs;
	WCHAR** pstrArgList = CommandLineToArgvW( GetCommandLine(), &nNumArgs );
	for( int iArg=1; iArg<nNumArgs; iArg++ )
	{
		StringCchLength( pstrArgList[iArg], 256, &nArgLen );
		if( _wcsnicmp( pstrArgList[iArg], strAuditioning, nArgLen ) == 0 && nArgLen == 9 )
			return true;
	}
	return false;
}

//---------------------------------------------------------------------------------------
//Play Sound
bool HandlePlaySound(int num, XACTTIME timeOffset)
{
	if (num < 0 || num >= g_audioState.MAX_SOUNDS_NUM)
		return false;
	g_audioState.pSoundBank->Play(g_audioState.iSounds[num], 0, timeOffset, NULL);
	return true;
}

//Set Musics Volume
bool HandleSetBackMusicsVolume(float fVolume)
{
	g_audioState.fBackMusicsVolume = fVolume;
	if (g_audioState.fBackMusicsVolume < 0.0f)
		g_audioState.fBackMusicsVolume = 0.0f;
	if (g_audioState.fBackMusicsVolume > 20.0f)
		g_audioState.fBackMusicsVolume = 20.0f;
	HRESULT hr = g_audioState.pEngine->SetVolume(g_audioState.iBackMusicsCategory, g_audioState.fBackMusicsVolume);
	if (hr == S_OK)
		return true;
	else
		return false;
}
//Set Sounds Volume
bool HandleSetSoundsVolume(float fVolume)
{
	g_audioState.fSoundsVolume = fVolume;
	if (g_audioState.fSoundsVolume < 0.0f)
		g_audioState.fSoundsVolume = 0.0f;
	if (g_audioState.fSoundsVolume > 20.0f)
		g_audioState.fSoundsVolume = 20.0f;
	HRESULT hr = g_audioState.pEngine->SetVolume(g_audioState.iSoundsCategory, g_audioState.fSoundsVolume);
	if (hr == S_OK)
		return true;
	else 
		return false;
}

//----------------------------------------------------------------------------------------
int AUDIO_STATE::GetRand() const
{
	static int n(0); 
	n += ((int)time(NULL))%RAND_MAX;
	srand((unsigned)n);
	return rand();
}

//----------------------------------------------------------------------------------------
//Change Volume
bool HandleChangeVolume(UINT uMsg, WPARAM wParam, float fChange) //直接处理消息改变音量
{
	if (uMsg == WM_KEYDOWN)
	{
		switch(wParam)
		{
		case 'Z':
			g_audioState.fBackMusicsVolume -= fChange;
			HandleSetBackMusicsVolume(g_audioState.fBackMusicsVolume);
			break;
		case 'X':
			g_audioState.fBackMusicsVolume += fChange;
			HandleSetBackMusicsVolume(g_audioState.fBackMusicsVolume);
			break;
		case 'A':
			g_audioState.fSoundsVolume -= fChange;
			HandleSetSoundsVolume(g_audioState.fSoundsVolume);
			break;
		case 'S':
			g_audioState.fSoundsVolume += fChange;
			HandleSetSoundsVolume(g_audioState.fSoundsVolume);
			break;
		}
	}
	return true;
}
